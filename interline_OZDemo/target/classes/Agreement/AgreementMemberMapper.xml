<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="jp.co.interlineOZDemo.dao.agreement.AgreementMemberMapper">
	
	<!-- 페이징을 위해 현제 해당하는 유저가 작성한 문서들의 총 갯수를 가져온다. -->
	<select id="getTotalAgreement" parameterType="int" resultType="int">
		select agreementAgreement.s + agreementMemorandum.s total 
		from 
			(select count(distinct userNum) s from agreementAgreement where userNum=#{userNum}) agreementAgreement, 
			(select count(distinct userNum) s from agreementMemorandum where userNum=#{userNum}) agreementMemorandum
	</select>
	
	<!-- 동의서와 각서 둘다 합쳐서 모두 가져옵니다.  union으로 합치기위해 컬럼명을 동일하게하고  vo는 어차피 중복이므로 agreement껄 사용합니다. -->
	<select id="getAgreementList" parameterType="int" resultType="agreementAgreement">
		select 
			userNum, sort, reportNum, agreementDate agreementDate, systemReportNum, customer
		from 
			agreementAgreement where userNum=#{userNum} 
		UNION ALL 
		select 
			userNum, sort, reportNum, memorandumDate agreementDate, systemReportNum, customer
		from 
			agreementMemorandum where userNum=#{userNum}
		order by reportNum desc;
	</select>
	
	<!-- 세션의 유저넘버와 일치하는, 동의서시스템에서의 유저정보를 가져옵니다. -->
	<select id="getAgreementUserInform" parameterType="int" resultType="agreementUserInform">
		select * from agreementUserInform where userNum=#{userNum}
	</select>
	
	<!-- 다음 reportNum을 가져오기위한 select.  이 결과에  +1 을 하여 다음 저장되는 reportNum을 설정한다. -->
	<select id="nextReportNum" parameterType="int" resultType="int">
		select 
			coalesce(max(merged.reportNum),0) 
		from 	(select 
					reportNum 
				from 
					agreementAgreement 
				where 
					userNum=#{userNum} 
				union 
				select 
					reportNum 
				from 
					agreementMemorandum
				where
					userNum=#{userNum}) merged
	</select>
	
	<!-- 동의서를 한행 저장한다. -->
	<insert id="saveAgreement" parameterType="agreementAgreement">
		insert into agreementAgreement (
			userNum,
			systemReportNum,
			reportNum,
			
			company,
			address,
			post,
			phoneNumber,
			email,
			incharge,
			
			agreementDate,
			customer,
			sign,
			sort
		) VALUES (
			#{userNum},
			get_seq('agreementSeq'),
			#{reportNum},
			
			#{company},
			#{address},
			#{post},
			#{phoneNumber},
			#{email},
			#{incharge},
			
			#{agreementDate},
			#{customer},
			#{sign},
			#{sort}
		)
	</insert>
	
	<!-- 정보수정을 하기위해 먼저 기본 id userNum password를 견.적.서. userInform테이블에서 가져온다. 유저정보에선 가장 모체가되는 테이블이므로. -->
	<select id="getMemberByAgreementSys" parameterType="member" resultType="member">
		select userNum, userId, password from userInform where userId=#{userId}
	</select>
	
	<!-- 본격 동의서시스템의 유저정보를 수정한다. -->
	<update id="updateAgreementUserInform" parameterType="agreementUserInform">
		update 
			agreementUserInform
		set
			company=#{company},
			representative=#{representative},
			post=#{post},
			address=#{address},
			email=#{email},
			phoneNumber=#{phoneNumber},
			incharge=#{incharge}
		where userNum=#{userNum}
	</update>
	<!-- 비밀번호를 바꿨을경우 모체userInform(견적서시스템의 userInform)의 비밀번호를 수정한다. -->
	<update id="updatePasswordByAgreementSys" parameterType="member">
		update userInform
			password=#{password}
		where userNum=#{userNum}
	</update>
	
	<!-- 만약 동의서 시스템에서 비밀번호가 바뀌었다면 업데이트된 내용이 세션에 저장되어야 하므로 모두 가져온다. 
	<select id="getUserInformByAgreementSys" parameterType="int" resultType="member">
		select * from userInform where userNum=#{userNum}
	</select>-->
	
	<!-- 동의서를 하나 가져온다. -->
	<select id="getAgreement" parameterType="agreementAgreement" resultType="agreementAgreement">
		select * from agreementAgreement where userNum=#{userNum} and reportNum=#{reportNum}
	</select>
	
	
	<!-- 동의서를 지운다. 아래의 "각서를 지운다"와 함께쓰인다.  (함께쓰이는 이유: 지울 리포트넘버들을 받아오지만 동의서에있을지 각서에 있을지 모른다. 그래서 각각 delete를 한다. 한쿼리에하는것보다 두쿼리에 하는게 빠르다.)-->
	<delete id="deleteAgreement" parameterType="hashMap">
		delete from agreementAgreement where userNum=#{userNum} and 
		reportNum in (<foreach item="item" index="i" collection="reportNum" separator=",">#{item}</foreach>)
	</delete>
	<!-- 각서를 지운다. 위의"동의서를 지운다"와 함께쓰인다. (함께쓰이는 이유: 지울 리포트넘버들을 받아오지만 동의서에있을지 각서에 있을지 모른다. 그래서 각각 delete를 한다. 한쿼리에하는것보다 두쿼리에 하는게 빠르다.)-->
	<delete id="deleteMemorandum" parameterType="hashMap">
		delete from agreementMemorandum where userNum=#{userNum} and 
		reportNum in (<foreach item="item" index="i" collection="reportNum" separator=",">#{item}</foreach>)
	</delete>
	
	<insert id="insertMemorandumSheet" parameterType="agreementMemorandum">
	insert into agreementMemorandum(
	userNum 
	,systemReportNum
	,reportNum 

	,company	
	,representative
	,post	
	,address
	,stamp

	,memorandumDate
	,customer	
	,sign
	,sort	
	)values(
	#{userNum}
	,get_seq('agreementSeq')
	,#{reportNum}

	,#{company}	
	,#{representative}
	,#{post}	
	,#{address}
	,#{stamp}

	,#{memorandumDate}
	,#{customer}
	,#{sign}
	,#{sort}
	)
	</insert>
	
</mapper>